[
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "Move Recommendation Results",
    "section": "",
    "text": "This section presents example outputs from the hybrid movie recommender system. The model uses a weighted combination of textual similarity (derived from movie overviews, genres, directors, and actors using TF-IDF) and numerical similarity (based on ratings, financial metrics, and popularity). The weighting used for these examples assigns 75% importance to numerical features and 25% to textual features.\nTo demonstrate the model’s recommendations, we selected several well-known films across different genres and display their top 10 most similar movies based on the combined similarity score. For each case, we provide the movie’s metadata alongside the recommended titles and their similarity rankings.\n\nInterstellar\n\nimport pandas as pd \n\ninterstellar_metadata = pd.read_csv(\"./recommendation_tables/interstellar_metadata.csv\", index_col=0)\ninterstellar_metadata = interstellar_metadata.reset_index(drop = True)\n\ninterstellar_metadata.head()\n\n\n\n\n\n\n\n\nTitle\nYear\nAge_Rating\nRuntime\nDirector\nActors\nAverage_Rating\nOscar_Wins\n\n\n\n\n0\ninterstellar\n2014\npg-13\n169\nchristopher nolan\nmatthew mcconaughey anne hathaway jessica chas...\n7.95\n1\n\n\n\n\n\n\n\nTop 10 Recommendations\n\ninterstellar_recs = pd.read_csv(\"./recommendation_tables/interstellar_recommendations.csv\", index_col = 0)\ninterstellar_recs.head()\n\n\n\n\n\n\n\n\nTitle\nYear\nAge_Rating\nDirector\nAverage_Rating\nSimilarity_Score\n\n\n\n\n1\ncontact\n1997\npg\nrobert zemeckis\n6.975\n0.7687\n\n\n2\nthe dark knight rises\n2012\npg-13\nchristopher nolan\n8.175\n0.7652\n\n\n3\ntenet\n2020\npg-13\nchristopher nolan\n7.100\n0.7639\n\n\n4\nthe dark knight\n2008\npg-13\nchristopher nolan\n8.825\n0.7571\n\n\n5\ninception\n2010\npg-13\nchristopher nolan\n8.325\n0.7570\n\n\n\n\n\n\n\n\n\n\nTroy\n\nimport pandas as pd \n\ntroy_metadata = pd.read_csv(\"./recommendation_tables/troy_metadata.csv\", index_col = 0)\ntroy_metadata.head()\n\n\n\n\n\n\n\n\nTitle\nYear\nAge_Rating\nRuntime\nDirector\nActors\nAverage_Rating\nOscar_Wins\n\n\n\n\n0\ntroy\n2004\nr\n163\nwolfgang petersen\nbrad pitt eric bana orlando bloom\n6.35\n0\n\n\n\n\n\n\n\nTop 10 Recommendations\n\ntroy_recs = pd.read_csv(\"./recommendation_tables/troy_recommendations.csv\", index_col = 0)\ntroy_recs.head()\n\n\n\n\n\n\n\n\nTitle\nYear\nAge_Rating\nDirector\nAverage_Rating\nSimilarity_Score\n\n\n\n\n1\nkingdom of heaven\n2005\nr\nridley scott\n6.125\n0.7688\n\n\n2\npirates of the caribbean the curse of the blac...\n2003\npg-13\ngore verbinski\n7.525\n0.7644\n\n\n3\nsnow white and the huntsman\n2012\npg-13\nrupert sanders\n5.650\n0.7592\n\n\n4\noceans twelve\n2004\npg-13\nsteven soderbergh\n6.100\n0.7576\n\n\n5\nthe day after tomorrow\n2004\npg-13\nroland emmerich\n5.550\n0.7555\n\n\n\n\n\n\n\n\n\n\nTreasure Planet\n\nimport pandas as pd \n\ntreasure_planet_metadata = pd.read_csv(\"./recommendation_tables/treasure_planet_metadata.csv\", index_col = 0)\ntreasure_planet_metadata.head()\n\n\n\n\n\n\n\n\nTitle\nYear\nAge_Rating\nRuntime\nDirector\nActors\nAverage_Rating\nOscar_Wins\n\n\n\n\n0\ntreasure planet\n2002\npg\n95\nron clements, john musker\njoseph gordon levitt emma thompson martin short\n6.925\n0\n\n\n\n\n\n\n\nTop 10 Recommendations\n\ntreasure_planet_recs = pd.read_csv(\"./recommendation_tables/treasure_planet_recommendations.csv\", index_col = 0)\ntreasure_planet_recs.head()\n\n\n\n\n\n\n\n\nTitle\nYear\nAge_Rating\nDirector\nAverage_Rating\nSimilarity_Score\n\n\n\n\n1\nthe princess and the frog\n2009\ng\nron clements, john musker\n7.550\n0.7860\n\n\n2\nmoana\n2016\npg\nron clements, john musker, don hall\n8.200\n0.7779\n\n\n3\nlightyear\n2022\npg\nangus maclane\n6.625\n0.7764\n\n\n4\nmuppet treasure island\n1996\ng\nbrian henson\n6.750\n0.7658\n\n\n5\nhome\n2015\npg\ntim johnson\n6.025\n0.7652\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Movie Recommendation Model",
    "section": "",
    "text": "Understanding movie similarity is a central challenge in modern recommendation systems, especially for streaming services, entertainment platforms, and media analytics. While traditional genre labels like “Action” or “Comedy” offer a general categorization, more nuanced comparisons, such as theme, tone, critical success, and cast composition, are essential for meaningful recommendations. This project aims to recommend similar movies using a hybrid content-based approach that combines both textual descriptors and numerical performance indicators. Two sets of features are used: one derived from natural language (plot overviews, genres, directors, actors) and another from structured movie metadata (ratings, budget, box office returns). These features are processed using cosine similarity metrics and combined with weighted fusion."
  },
  {
    "objectID": "index.html#pirates-of-the-caribbean-the-curse-of-the-black-pearl",
    "href": "index.html#pirates-of-the-caribbean-the-curse-of-the-black-pearl",
    "title": "Movie Recommendation Model",
    "section": "Pirates of the Caribbean: The Curse of the Black Pearl",
    "text": "Pirates of the Caribbean: The Curse of the Black Pearl\n\n\n\n\n \n\nThis action-adventure film stars Johnny Depp as Captain Jack Sparrow and is characterized by its fantasy elements, seafaring setting, and comedic undertones. It features high production value, strong box office performance, and a genre blend of action, fantasy, and comedy. Textually, it includes terms like “cursed treasure”, “pirates”, and “swashbuckling,” while numerically, it scores well on IMDB and TMDB, with a high return on investment."
  },
  {
    "objectID": "index.html#national-treasure",
    "href": "index.html#national-treasure",
    "title": "Movie Recommendation Model",
    "section": "National Treasure",
    "text": "National Treasure\n\n\n\n\n \n\nStarring Nicolas Cage, National Treasure combines historical intrigue with action and treasure-hunting themes. It shares textual similarities with Pirates in terms of pacing, adventure, and plot structure involving hidden clues and ancient secrets. Numerically, it also performs well with solid ratings and strong revenue, aligning closely with Pirates of the Carribean in both style and reception."
  },
  {
    "objectID": "index.html#the-mummy-1999",
    "href": "index.html#the-mummy-1999",
    "title": "Movie Recommendation Model",
    "section": "The Mummy (1999)",
    "text": "The Mummy (1999)\n\n\n\n\n \n\nA supernatural adventure with elements of romance, horror, and mythology, The Mummy features Brendan Fraser as the protagonist in a tale that also blends action with fantasy and historical references. Similar to Pirates, it contains themes of curses, ancient lore, and large-scale set pieces. Its descriptive features (“archaeologist”, “ancient Egypt”, “undead”) align textually with those of Pirates, while its strong box office and moderate critic ratings reflect similar audience appeal.\n\n\nBy comparing the narrative structure, genre alignment, and performance metrics of these three films, we see how hybrid feature modeling captures the essence of movie similarity more effectively than genre tags alone. For example, while Pirates of the Caribbean and The Lord of the Rings might both be labeled as “fantasy,” their tone, pacing, and character dynamics differ significantly. In contrast, movies like National Treasure and The Mummy, though labeled differently, often appeal to similar audiences due to shared thematic elements and viewing experiences.\nThese role-specific feature patterns, whether textual (plot summaries) or numerical (critic scores, budget performance), make movie datasets ideal for content-based recommendation systems. The consistent structure of movie attributes allows models to learn association patterns with high precision. In this project, these characteristics are leveraged to train a hybrid model that fuses TF-IDF vectorized text features with scaled numerical metadata, resulting in highly interpretable and customizable recommendations that go beyond basic genre matching.\nThe Github repository hosting all code for this project can be found here"
  },
  {
    "objectID": "data_collection.html",
    "href": "data_collection.html",
    "title": "Data Collection and Cleaning",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "methods.html",
    "href": "methods.html",
    "title": "Methods",
    "section": "",
    "text": "This section outlines the methodological framework used to develop a hybrid content-based Movie Recommender System. The system combines natural language processing and numerical data analysis to compute similarity scores between films and generate personalized recommendations. The approach integrates text vectorization with TF-IDF, feature scaling of numerical metadata, and cosine similarity to measure relational distance between movies. The final model fuses both similarity scores using a weighted linear combination, allowing for flexibility in tuning the relative importance of textual versus numerical features.\nThe methodology emphasizes the preprocessing of feature sets, construction of similarity matrices, and the design of the scoring function that powers the recommendation engine.\n\nText Feature Engineering\nTo extract meaningful patterns from the descriptive attributes of movies, a combined textual feature was created by concatenating each film’s overview, genre, director, and lead actors. This enriched string was used as input for a TF-IDF (Term Frequency–Inverse Document Frequency) vectorizer, which transforms raw text into a high-dimensional vector space.\nTF-IDF is effective at emphasizing terms that are unique or relevant to specific documents (in this case, movies) while down-weighting frequently occurring but less informative words. The output is a sparse matrix where each movie is represented as a TF-IDF vector. Cosine similarity is then applied to this matrix to compute pairwise textual similarity scores between all movies in the dataset.\n\n\nNumerical Feature Processing\nTo complement the textual descriptors, a set of structured numerical features was selected. These include both performance and financial metrics such as:\n\nRuntime\nAverage Ratings (IMDB, TMDB, Metascore, Rotten Tomatoes)\nOscar Wins\nBudget & Revenue (normalized)\nReturn on Investment\nPopularity\n\nBefore computing similarity, all numerical attributes were scaled using Min-Max normalization, ensuring that each feature contributes equally to the similarity calculation. A second cosine similarity matrix was generated based on these scaled numerical vectors, capturing relationships between films based on their quantitative profiles.\n\n\nHybrid Similarity Scoring\nTo create a unified recommendation model, the text-based and number-based similarity scores were combined through a weighted sum:\ncombined_similarity = text_weight  text_cos_similarity + numerical_weight * numerical_cos_similarity*\nThe default configuration assigns a greater emphasis to numerical similarity (75% numerical, 25% text), reflecting the assumption that films with similar popularity, critical acclaim, and financial success tend to be more comparable in audience appeal. However, the weights can be adjusted to prioritize textual content, such as plot themes or cast overlap, depending on use-case preferences.\n\n\nRecommendation Function\nThe final recommendation function takes a movie title as input, locates its index in the dataset, retrieves the corresponding row from the combined similarity matrix, and ranks all other movies based on their similarity scores. The top N most similar movies (excluding the input film) are returned as recommendations, along with key metadata fields and their corresponding similarity scores.\nThe result is a user-interpretable recommendation table that reflects both the thematic and statistical alignment between the queried movie and its most similar counterparts.\n\n\nSummary\nBy integrating both textual analysis and quantitative metrics, this hybrid recommender captures a richer, more nuanced notion of movie similarity. Unlike genre-only systems or purely collaborative filters, this method is content-aware and operates independently of user behavior data, making it ideal for cold-start scenarios, portfolio analysis, or standalone media exploration tools.\nLet me know if you’d like a visual schematic of the architecture or if you want to describe the TF-IDF vectorizer and cosine similarity more mathematically for a technical audience.\n\n\n\n\n\n\n Back to top"
  }
]