```{=html}
<style>
  .guess-container {
    max-width: 500px;
    margin: 20px auto;
    padding: 16px;
    background: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgb(0 0 0 / 0.1);
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  }

  .guess-container label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    font-size: 1.1rem;
    color: #333;
  }

  .input-row {
    display: flex;
    gap: 8px;
    margin-bottom: 12px;
  }

  #movieSearch {
    flex: 1;
    padding: 8px 12px;
    font-size: 1rem;
    border: 1.5px solid #ccc;
    border-radius: 6px;
    transition: border-color 0.2s ease;
  }

  #movieSearch:focus {
    outline: none;
    border-color: rgb(21, 61, 103);
    box-shadow: 0 0 5px rgb(21, 61, 103);
  }

  #submitBtn {
    padding: 8px 16px;
    background-color: rgb(21, 61, 103);
    color: white;
    font-weight: 600;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  #submitBtn:hover {
    background-color:rgb(77, 108, 142);
  }

  #suggestions {
    list-style: none;
    padding: 0;
    margin: 0 0 12px 0;
    max-height: 140px;
    overflow-y: auto;
    border: 1px solid #ccc;
    border-radius: 6px;
    background: white;
    box-shadow: 0 2px 6px rgb(0 0 0 / 0.1);
  }

  #suggestions li {
    padding: 8px 12px;
    cursor: pointer;
  }

  #suggestions li:hover,
  #suggestions li[aria-selected="true"] {
    background-color: rgb(21, 61, 103);
    color: white;
  }

  #message {
    font-size: 0.95rem;
    color: #d9534f;
    min-height: 1.2em;
  }

  .input-row {
    display: flex;
    gap: 12px;
    margin-bottom: 12px;
  }

  #guessTable {
    border-collapse: collapse;
    width: 100%;
    table-layout: fixed;
  }

  #guessTable th,
  #guessTable td {
    padding: 8px 12px;
    border-right: 1px solid #ddd;
  }

  #guessTable th:last-child,
  #guessTable td:last-child {
    border-right: none;
  }

  #guessTable thead th {
  border-bottom: 1px solid #ddd;
  padding-bottom: 8px;
  }

  .highlight {
    background-color: #dff0d8;
    font-weight: bold;
  }
</style>

<p style="max-width: 1000px; margin: 0 auto 16px auto; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 1rem; color: #333;">
  <strong>Instructions:</strong> The objective is to guess the secret movie title. Each guess you make will appear in the table below, along with a similarity score. Higher scores mean your guess is closer in attributes like plot, genre, director, actors, and rating. Use the suggestions to help you find valid movie titles and work your way toward the answer.
</p>

<div class="guess-container">
  <label for="movieSearch">Guess a Movie:</label>
  <div class="input-row">
    <input
      type="text"
      id="movieSearch"
      placeholder="Type to search movies..."
      autocomplete="off"
      aria-autocomplete="list"
      aria-controls="suggestions"
      aria-haspopup="listbox"
      aria-expanded="false"
    />
    <button id="submitBtn">Submit Guess</button>
  </div>

  <ul id="suggestions" role="listbox"></ul>

  <div id="message"></div>
</div>

<table id="guessTable" aria-live="polite" aria-label="Guessed movies" style="width: 100%; table-layout: fixed;">
<thead>
    <tr>
        <th style="width: 8%;">Rank</th>
        <th style="width: 25%;">Title</th>
        <th style="width: 8%;">Year</th>
        <th style="width: 10%;">Age Rating</th>
        <th style="width: 15%;">Genre</th>
        <th style="width: 15%;">Director</th>
        <th style="width: 10%;">Avg Rating</th>
        <th style="width: 9%;">Similarity</th>
    </tr>
</thead>
<tbody></tbody>
</table>

<script>

document.addEventListener("DOMContentLoaded", () => {
    console.log("ðŸŽ¬ Script running...");
    let guesses = [];
    let movies = [];
    let targetMovie = null;

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    // Load movies from the JSON file
    fetch("./movie_guesser_dfs/1917.json")
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error("Failed to load movies.json");
            }
        })
        .then(data => {
            shuffleArray(data);
            movies = data;
            window.debugMovies = movies;

            // Safely assign after loading
            targetMovie = movies.find(m => m.Similarity_Score === 100)?.Title || null;
        })
        .catch(error => {
            console.error("Error loading movies:", error);
        });

    const movieSearch = document.getElementById("movieSearch");
    const suggestions = document.getElementById("suggestions");
    const submitBtn = document.getElementById("submitBtn");
    const message = document.getElementById("message");
    const guessTableBody = document.querySelector("#guessTable tbody");

    function clearSuggestions() {
        suggestions.innerHTML = "";
        movieSearch.setAttribute("aria-expanded", "false");
    }

    function showSuggestions(filtered) {
        clearSuggestions();
        filtered.forEach(movie => {
            const li = document.createElement("li");
            li.textContent = movie.Title;
            li.style.padding = "4px";
            li.style.cursor = "pointer";
            li.setAttribute("role", "option");
            li.onclick = () => {
                movieSearch.value = movie.Title;
                clearSuggestions();
                movieSearch.focus();
            };
            suggestions.appendChild(li);
        });
        if (filtered.length > 0) {
            movieSearch.setAttribute("aria-expanded", "true");
        }
    }

    movieSearch.addEventListener("input", () => {
        const query = movieSearch.value.trim().toLowerCase();
        if (query.length < 2 || movies.length === 0) {
            clearSuggestions();
            return;
        }
        const filtered = movies
            .filter(m => m.Title.toLowerCase().includes(query))
            .slice(0, 10);
        showSuggestions(filtered);
    });

    function addGuess(title) {
        if (guesses.some(g => g.Title === title)) {
            message.textContent = `Already guessed '${title}'. Try a different movie.`;
            return;
        }
        const movie = movies.find(m => m.Title === title);
        if (!movie) {
            message.textContent = `'${title}' is not a valid movie title. Please select from the suggestions.`;
            return;
        }

        guesses.push(movie);
        renderGuesses();

        if (title === targetMovie) {
            message.textContent = "ðŸŽ‰ Congratulations! You found the Movie!";
        } else {
            message.textContent = "";
        }
    }

    function renderGuesses() {
        guessTableBody.innerHTML = "";
        guesses
            .sort((a, b) => a.Rank - b.Rank)
            .forEach(guess => {
                const tr = document.createElement("tr");

                if (guess.Title === targetMovie) {
                    tr.classList.add("highlight");
                }

                tr.innerHTML = `
                    <td>${guess.Rank}</td>
                    <td>${guess.Title}</td>
                    <td>${guess.Year}</td>
                    <td>${guess.Age_Rating}</td>
                    <td>${guess.Genre}</td>
                    <td>${guess.Director}</td>
                    <td>${guess.Average_Rating.toFixed(1)}</td>
                    <td>${guess.Similarity_Score.toFixed(2)}</td>
                `;
                guessTableBody.appendChild(tr);
            });
    }

    submitBtn.addEventListener("click", () => {
        const guess = movieSearch.value.trim();
        if (guess) {
            addGuess(guess);
            movieSearch.value = "";
            clearSuggestions();
        }
    });

    movieSearch.addEventListener("keydown", e => {
        if (e.key === "Enter") {
            submitBtn.click();
            e.preventDefault();
        }
    });

    document.addEventListener("click", e => {
        if (!document.getElementById("movieSearch").contains(e.target) &&
            !document.getElementById("suggestions").contains(e.target)) {
            clearSuggestions();
        }
    });
});
</script>

```